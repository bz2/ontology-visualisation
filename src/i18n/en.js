/* eslint max-len:0 */
export default {
  // titles & descriptions
  ontologyVisualisationDescription: 'Highways England ontology visualisation web app',

  // header
  signOut: 'Sign out',
  alphaVersion: 'Alpha version',
  betaVersion: 'Beta version',
  alphaVersionInviteOnly: 'Alpha version | Invite only!',
  home: 'Home',

  // navbar
  hideSidebar: 'Hide sidebar',
  showSidebar: 'Show sidebar',
  networkGraphView: 'Network graph view',
  tableView: 'Table view',
  showNetworkGraph: 'Show network graph',
  showTable: 'Show table',
  showInfo: 'Show element info',
  hideInfo: 'Hide element info',
  nodes: 'Nodes',
  allowNodeSelection: 'Allow node selection',
  disallowNodeSelection: 'Disallow node selection',

  // sidebar
  networkGraphs: 'Network graphs',
  nodeNeighbourhood: 'Node neighbourhood',
  ontologyFilter: 'Ontology filter',
  shortestPath: 'Shortest path',
  toggleSidebar: 'Toggle sidebar',
  nodesSelection: 'Nodes selection',
  edgesSelection: 'Edges selection',
  nodesFilter: 'Nodes filter',
  edgesFilter: 'Edges filter',
  selectNodes: 'Select nodes',
  selectEdges: 'Select edges',
  settings: 'Settings',
  styling: 'Styling',
  export: 'Export',
  freeTextSearch: 'Free-text search',
  versioning: 'Versioning',

  // data loading
  couldNotQueryGraph: 'Could not query graph!',
  couldNotQueryAnnotationProperties: 'Could not query annotation properties!',

  // node selection
  node: 'Node',
  noRelationships: 'No relationships found',
  selectNodeFromGraph: 'Select node from graph',

  // filter
  filterNodesByNodeProps: 'Filter Nodes by Node Properties',
  filterEdgesByEdgesProps: 'Filter Edges by Edge Properties',
  searchInputText: 'Enter search string',
  performSearch: 'Perform search',

  // node properties
  filterNodesByArbitraryPropsCombination: 'Filter nodes by any arbitrary combination of one or more node property values',
  searchString: 'Search string',
  selectProperty: 'Select property',
  removeFilter: 'Remove filter',
  showFilteredNodes: 'Show filtered nodes',

  freeNodeSearchInputPlaceholder: 'Filter by Node properties',
  allNodeProperties: 'All node properties',
  filterNodesDescription1: 'First select the node properties you would like to search on',
  filterNodesDescription2: 'Then enter the search string to filter',

  // edge properties
  filterEdgesByArbitraryPropsCombination: 'Filter edges by any arbitrary combination of one or more edge property values',
  showFilteredEdges: 'Show filtered edges',

  freeEdgeSearchInputPlaceholder: 'Filter by Edge properties',
  selectEdgeProperties: 'Select edge properties to search on',
  allEdgeProperties: 'All edge properties',
  filterEdgesDescription1: 'First select the edge properties you would like to search on',
  filterEdgesDescription2: 'Then enter the search string to filter',

  // edge selection
  selectEdgeFromGraph: 'Select edge from graph',
  edge: 'Edge',

  // bounding box
  boundingBox: 'Bounding box selection',
  drawBoundingBox: 'Select nodes by drawing a bounding box in the canvas',
  drawBoundingBoxFirstClick: 'First click: Start drawing',
  drawBoundingBoxSecondClick: 'Second click: Set bounding box',
  showSelectedNodes: 'Show selected nodes',
  selectionDirection: 'Selection direction',
  insideBoundingBox: 'Inside bounding box',
  outsideBoundingBox: 'Outside bounding box',

  // node neighbourhood
  show: 'Show',
  separationDegree: 'Separation degree',
  selectedNode: 'Selected node',
  insertNumber: 'Insert number',
  showNeighbourhood: 'Show neighbourhood',

  // shortest path
  selectNodesFromGraph: 'Select nodes from graph',
  isNodeOverlay: 'Show path over nodes',
  isNotNodeOverlay: 'Show path only',
  selectStartingNode: 'Select starting node',
  selectEndingNode: 'Select ending node',

  // Physics settings
  physicsSettings: 'Physics settings',
  hierachicalView: 'Hierarchical view',
  gravitationalView: 'Gravitational view',
  enableRepulsion: 'Enable repulsion',
  disableRepulsion: 'Disable repulsion',
  physics: 'Physics',
  repulsion: 'Repulsion',
  positioning: 'Positioning',
  chooseColor: 'Click to change colour',

  // Physics Edge
  stylingEdgeByProperty: 'Edge styling by property',
  edgeStylingGlobal: 'Global edge styling',
  edgeStyling: 'Edge styling',
  stylingEdgeLength: 'Edge length',
  stylingEdgeWidth: 'Edge thickness',
  stylingEdgeLineStyle: 'Edge line style',
  stylingEdgeLineColorChooseProperty: 'Choose property',
  stylingEdgeLineColor: 'Line colour',
  stylingEdgeLineColorHighlight: 'Highlight colour',
  stylingEdgeLineColorHover: 'Hover colour',
  stylingEdgeTextColor: 'Text colour',
  stylingEdgeTextSize: 'Text size',
  stylingEdgeTextAlign: 'Text alignment',
  stylingEdgeCaptionProperty: 'Edge caption property',
  edgeByPropInstructions1: 'Choose the property you wish to style',
  edgeByPropInstructions2: 'Then choose the styles below to update that property',
  edgeLenghtOnlyWithPhysicsOn: 'Edge length works only with physics on',

  horizontal: 'Horizontal',
  top: 'Top',
  middle: 'Middle',
  bottom: 'Bottom',

  nodeStyling: 'Node styling',
  stylingNodeByProperty: 'Node styling by property',
  nodeStylingGlobal: 'Global node styling',
  stylingNodeSize: 'Node size',
  stylingNodeShape: 'Node shape',
  nodeColor: 'Node colour',
  stylingNodeBorder: 'Node border',
  nodeBorderLineWidth: 'Border width',
  stylingNodeBorderSelected: 'Border width highlighted',
  stylingNodeBorderColor: 'Border colour',
  stylingNodeTextColor: 'Node text colour',
  stylingNodeHighlightBorderColor: 'Border colour highlighted',
  stylingNodeBackgroundColor: 'Background colour',
  stylingNodeHighlightBackgroundColor: 'Background colour highlighted',
  stylingNodeHoverBackgroundColor: 'Background colour on hover',
  stylingNodeHoverBorderColor: 'Border colour on hover',
  stylingNodeTextFontSize: 'Node font size',
  nodeCaptionPosition: 'Node caption position',
  nodeCaptionProperties: 'Node caption properties',
  nodeShapeInstructions: 'Choose the node shape',
  stylingNodeTextFontAlign: 'Node font alignment',
  stylingNodeCaptionProperty: 'Node caption property',
  ifNodeHasProperty: 'If node property',
  setNodeStyle: 'Set node style',
  selectStyle: 'Select style',
  as: 'As',
  equal: 'Equal',
  contains: 'Contains',
  styleByProperty: 'Style by property',
  saved: 'Saved!',

  ellipse: 'Ellipse',
  circle: 'Circle',
  database: 'Database',
  box: 'Box',
  text: 'Text',
  diamond: 'Diamond',
  dot: 'Dot',
  star: 'Star',
  triangle: 'Triangle',
  triangleDown: 'Triangle Down',
  hexagon: 'Hexagon',
  square: 'Square',
  onlyFollowingShapesAffected: 'Only the following node shapes are affected by size',

  // Physics Node
  physicsOn: 'Physics on',
  physicsOff: 'Physics off',

  // Export settings
  fileName: 'File name',
  insertName: 'Insert name',
  exportGraphAs: 'Export graph as',
  jpeg: 'JPG',
  png: 'PNG',
  pdf: 'PDF',
  exportDataAs: 'Export data as',
  csv: 'CSV',
  owl: 'OWL',
  PrintGraph: 'Print graph',
  print: 'Print',
  fileCanBeDownloaded: 'File can now be downloaded, check your browser!',
  fileCanBePrinted: 'File can now be printed, check your browser!',
  couldNotDownloadCsv: 'Could not download CSV!',
  insertFileName: 'Insert file name.',

  // custom query
  customQuery: 'Custom query',
  insertGremlinQueries: 'Insert Gremlin query',
  queryOutput: 'Query output',
  queryHistory: 'Query history',
  removeFromHistory: 'Remove from history',
  queryAgain: 'Query again',
  query: 'Query',
  clear: 'Clear',
  exportAsJson: 'Export as Json',

  // versioning
  version: 'Version',
  searchOrCreate: '',
  chooseGraphVersion: 'Choose graph version',
  insertGraphVersion: 'Insert graph version',
  fromGraphVersion: 'From version',
  setGraph: 'Set as current graph',
  save: 'Save',
  load: 'Load',
  chooseLocation: 'Choose location',
  file: 'File',
  server: 'Server',
  storedToServer: 'Graph version stored to server!',
  graphVersionFileNotValid: 'The file you uploaded is not valid!',
  graphVersionLoaded: 'Graph version loaded!',
  dragAndDrop: 'Drag and drop files to here to upload.',

  // edit ontology
  edit: 'Edit',
  new: 'New',
  add: 'Add',
  type: 'Type',
  chooseElementType: 'Choose element type',
  update: 'Update',
  delete: 'Delete',
  restore: 'Restore',
  selectGraph: 'Select graph',
  chooseOperation: 'Choose operation',
  go: 'Go',
  selectElement: 'Select element',
  editOntology: 'Edit ontology',
  insertProperties: 'Insert properties',
  editProperties: 'Edit properties',
  requiredField: 'This field is required',
  restoreOriginal: 'Restore',
  idExists: 'ID already exists',
  noDeletedElements: 'No deleted elements to restore!',
  nodeIdAlreadyExists: 'Node ID already exists',
  edgeIdAlreadyExists: 'Edge ID already exists',
  connection: 'Connection',
  chooseElementsToConnect: 'Choose elements to connect',
  fromNode: 'From node',
  toNode: 'To node',
  toAndFromNodesEqual: 'To and from nodes cannot be the same!',
  connectionAlreadyExists: 'Connection already exists',

  // footer navbar
  hidePhysicsSettings: 'Hide physics settings',
  showPhysicsSettings: 'Show physics settings',
  allowEdgeSelection: 'Allow edge selection',
  disallowEdgeSelection: 'Disallow edge selection',
  selectedEdges: 'Selected edges',

  // info
  id: 'ID',
  label: 'Label',
  rdfAbout: 'rdfAbout',
  skosComment: 'skosComment',
  skosDefinition: 'skosDefinition',
  skosExample: 'skosExample',
  null: 'Null',
  deleteNode: 'Delete node',
  selectedNodes: 'Selected nodes',
  removeNode: 'Remove node',
  removeEdge: 'Remove edge',
  removeGraph: 'Remove graph',
  viewNode: 'View node',
  viewGraph: 'View graph',
  viewEdge: 'View edge',
  goBack: 'Go back',
  properties: 'Properties',
  relationships: 'Relationships',
  from: 'From',
  to: 'to',
  nodesProperties: 'Nodes properties',
  predicate: 'Predicate',

  // search
  search: 'Search',
  focusElement: 'Focus element',

  // edges list
  edges: 'Edges',

  // Progress bar
  loading: 'Loading...',

  // context menu
  queryGraph: 'queryGraph',
  expandNode: 'Expand node',
  close: 'Close',

  // login
  signIn: 'Sign In',
  login: 'Login',
  email: 'Email',
  password: 'Password',
  invalidEmailPassword: 'Invalid Email or Password',
  forgotPasswordLink: 'Forgot Password?',
  continueGuest: 'Continue as Guest',

  // forgot password
  forgotPassword: 'Forgot Password',
  enterEmail: 'Enter your email',
  send: 'Send',
  backToLogin: 'Back to sign in',
  resetPasswordAtEmail: 'Reset password sent at email',

  // profile
  profile: 'Profile',
  firstName: 'First Name',
  lastName: 'Last Name',
  company: 'Company',
  changePassword: 'Change Password'
}
