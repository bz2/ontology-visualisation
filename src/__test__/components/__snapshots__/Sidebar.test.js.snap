// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sidebar should match snapshot when sidebar closed 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={false}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="networkGraphs"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_BOUNDING_BOX 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="boundingBox"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_CUSTOM_QUERY 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="customQuery"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_EDGES_FILTER 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="edgesFilter"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_EDGES_SELECTION 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="edgesSelection"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_EDIT_ONTOLOGY 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="editOntology"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_EXPORT 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="export"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_FREE_TEXT_SEARCH 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="freeTextSearch"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_GRAPHS 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="networkGraphs"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_NEIGHBOURHOOD 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="nodeNeighbourhood"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_NODES_FILTER 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="nodesFilter"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_NODES_SELECTION 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="nodesSelection"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_SETTINGS 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="settings"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_SHORTEST_PATH 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="shortestPath"
>
  <Component />
</Connect>
`;

exports[`Sidebar should match snapshot when sidebar open and SIDEBAR_VIEW_VERSIONING 1`] = `
<Connect
  actions={
    Object {
      "addToArray": [Function],
      "addToObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "resetSelectedEdges": [Function],
      "resetSelectedNodes": [Function],
      "setStoreState": [Function],
    }
  }
  isSidebarOpen={true}
  mapToProps={[Function]}
  setStoreState={[MockFunction]}
  sidebarView="versioning"
>
  <Component />
</Connect>
`;
