// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphVisualisation should match snapshot  1`] = `
<Connect
  actions={
    Object {
      "addNumber": [Function],
      "addOrAppendToObject": [Function],
      "addSubValueToObject": [Function],
      "addToArray": [Function],
      "addToObject": [Function],
      "addValueToSubkeyObject": [Function],
      "removeFromArray": [Function],
      "removeFromObject": [Function],
      "setStoreState": [Function],
      "toggleFromArrayInKey": [Function],
      "toggleFromSubArray": [Function],
    }
  }
  addNumber={[MockFunction]}
  addSubValueToObject={[MockFunction]}
  availableEdges={
    DataSet {
      "_data": Map {},
      "_idProp": "id",
      "_options": Object {},
      "_queue": null,
      "_subscribers": Object {
        "*": Array [],
        "add": Array [],
        "remove": Array [],
        "update": Array [],
      },
      "length": 0,
      "subscribe": [Function],
      "unsubscribe": [Function],
    }
  }
  availableNodes={
    DataSet {
      "_data": Map {},
      "_idProp": "id",
      "_options": Object {},
      "_queue": null,
      "_subscribers": Object {
        "*": Array [],
        "add": Array [],
        "remove": Array [],
        "update": Array [],
      },
      "length": 0,
      "subscribe": [Function],
      "unsubscribe": [Function],
    }
  }
  boundingBoxGeometry={
    Object {
      "boundingBoxHeight": 200,
      "boundingBoxPosX": 100,
      "boundingBoxPosY": 100,
      "boundingBoxWidth": 200,
      "fixedPointX": 100,
      "fixedPointY": 100,
    }
  }
  currentGraph="graph-0"
  globalEdgeStyling={
    Object {
      "stylingEdgeLength": 250,
      "stylingEdgeLineColor": "#070b11",
      "stylingEdgeLineColorHighlight": "#9c27b0",
      "stylingEdgeLineColorHover": "#070b11",
      "stylingEdgeLineStyle": false,
      "stylingEdgeTextAlign": "horizontal",
      "stylingEdgeTextColor": "#070b11",
      "stylingEdgeTextSize": 12,
      "stylingEdgeWidth": 1,
    }
  }
  isBoundingBoxSelectable={true}
  isPhysicsOn={true}
  mapToProps={[Function]}
  network={Object {}}
  nodesIdsToDisplay={Array []}
  physicsHierarchicalView={true}
  physicsRepulsion={true}
  removeFromObject={[MockFunction]}
  setStoreState={[MockFunction]}
  showContextMenu={true}
  toggleFromArrayInKey={[MockFunction]}
>
  <Component />
</Connect>
`;
